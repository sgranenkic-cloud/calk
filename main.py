
import os, re
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_TOKEN_HERE")
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "grondkind")

# States
HR_MAX, HR_PERCENT = range(2)
SEG_DIST, SEG_PACE = range(2)

BACK_TEXT = "‚¨Ö –ù–∞–∑–∞–¥"

def kb_main():
    return ReplyKeyboardMarkup(
        [["% –ø—É–ª—å—Å–∞", "–í—Ä–µ–º—è –ø–æ —Ç–µ–º–ø—É"],
         ["–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–∞"],
         ["–î–æ—Ä–æ–∂–∫–∞ ‚Üî –¢–µ–º–ø"]],
        resize_keyboard=True
    )

def kb_back():
    return ReplyKeyboardMarkup([[KeyboardButton(BACK_TEXT)]], resize_keyboard=True, one_time_keyboard=True)

# ---------- Helpers ----------
def parse_time_to_seconds(s: str) -> int:
    s = s.strip()
    parts = s.split(":")
    if not all(p.isdigit() for p in parts):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
    if len(parts) == 3:
        h, m, sec = map(int, parts)
        return h*3600 + m*60 + sec
    elif len(parts) == 2:
        m, sec = map(int, parts)
        return m*60 + sec
    elif len(parts) == 1:
        return int(parts[0])
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

def fmt_time(seconds: int) -> str:
    seconds = int(round(seconds))
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return f"{h}:{m:02d}:{s:02d}" if h else f"{m}:{s:02d}"

def parse_pace_to_sec_per_km(s: str) -> int:
    # pace in mm:ss per km
    return parse_time_to_seconds(s)

def get_val(text: str, key: str):
    m = re.search(rf"{key}\s*=\s*([^\s]+)", text)
    return m.group(1) if m else None

# ---------- Start / Menu ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üêÜ –ü—Ä–∏–≤–µ—Ç!\n"
        "–¢—ã –≤ –±–æ—Ç–µ –±–µ–≥–æ–≤–æ–≥–æ –∫–ª—É–±–∞ Cheetah.Club ‚Äî –º–µ—Å—Ç–µ, –≥–¥–µ –ø—Ä–æ–±–µ–∂–∫–∏ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –ø—Ä–∏–≤—ã—á–∫—É, –∞ –ø—Ä–∏–≤—ã—á–∫–∞ ‚Äî –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "‚ñ´Ô∏è –£–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É –∏ —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º –≥–µ–ø–∞—Ä–¥–æ–º.\n"
        "‚ñ´Ô∏è –ü–æ–Ω—è—Ç—å, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —à–∞–≥–æ–≤ –≤ –±–µ–≥–µ.\n"
        "‚ñ´Ô∏è –ù–∞–π—Ç–∏, –≥–¥–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
        "‚ñ´Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã –∏ —Ñ–æ—Ä–º–∞—Ç –∑–∞–Ω—è—Ç–∏–π.\n\n"
        "–ú—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ–º:\n"
        "üèÉ‚Äç‚ôÄÔ∏è –û—Ç –ø–µ—Ä–≤—ã—Ö  –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –¥–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞ –∏ –¥–∞–ª—å—à–µ.\n"
        "üí¨ –í –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ –∏ –æ–Ω–ª–∞–π–Ω.\n"
        "üìÖ –ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ –≤ —É–¥–æ–±–Ω–æ–µ —Ç–µ–±–µ –≤—Ä–µ–º—è.\n\n"
        "–ñ–º—è–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º!"
    )
    await update.message.reply_text(text, reply_markup=kb_main())

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–∏—Ä–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=kb_main())

# ---------- Universal BACK handler ----------
async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–û–∫–µ–π, –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=kb_main())
    return ConversationHandler.END

# ---------- 1) % –ø—É–ª—å—Å–∞ ----------
async def hr_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å (HRmax), –Ω–∞–ø—Ä–∏–º–µ—Ä: 190", reply_markup=kb_back())
    return HR_MAX

async def hr_got_max(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip()
    if txt == BACK_TEXT:
        return await go_back(update, context)
    try:
        hrmax = int(txt)
        if not (80 <= hrmax <= 240):
            raise ValueError
    except Exception:
        await update.message.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 190. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:", reply_markup=kb_back())
        return HR_MAX
    context.user_data["hrmax"] = hrmax
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã (–æ–¥–∏–Ω –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω). –ü—Ä–∏–º–µ—Ä—ã: 75  –∏–ª–∏  70-85", reply_markup=kb_back())
    return HR_PERCENT

async def hr_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BACK_TEXT:
        return await go_back(update, context)
    hrmax = context.user_data.get("hrmax")
    text = update.message.text.replace("%","").strip()
    m = re.match(r"^\s*(\d{1,3})(?:\s*-\s*(\d{1,3}))?\s*$", text)
    if not m or hrmax is None:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü—Ä–∏–º–µ—Ä—ã: 75  –∏–ª–∏  70-85", reply_markup=kb_back())
        return HR_PERCENT
    p1 = int(m.group(1))
    p2 = int(m.group(2) or p1)
    lo = round(hrmax * p1 / 100)
    hi = round(hrmax * p2 / 100)
    if p1 == p2:
        await update.message.reply_text(f"{p1}% –æ—Ç {hrmax} ‚Üí ‚âà {lo} —É–¥/–º–∏–Ω", reply_markup=kb_main())
    else:
        await update.message.reply_text(f"{p1}-{p2}% –æ—Ç {hrmax} ‚Üí ‚âà {lo}‚Äì{hi} —É–¥/–º–∏–Ω", reply_markup=kb_main())
    return ConversationHandler.END

# ---------- 2) –í—Ä–µ–º—è –ø–æ —Ç–µ–º–ø—É (distance meters + pace) ----------
async def seg_time_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 400, 1000, 352):", reply_markup=kb_back())
    return SEG_DIST

async def seg_time_get_dist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.strip().replace(",", ".")
    if txt == BACK_TEXT:
        return await go_back(update, context)
    try:
        # –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–µ —Ä—É–≥–∞–µ–º—Å—è –∑–∞ –Ω–µ –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å 100)
        meters = float(txt)
        if meters <= 0:
            raise ValueError
    except Exception:
        await update.message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ –º–µ—Ç—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä 400 –∏–ª–∏ 352. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:", reply_markup=kb_back())
        return SEG_DIST
    context.user_data["seg_m"] = meters
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å —Ç–µ–º–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º:—Å—Å (–Ω–∞ –∫–º), –Ω–∞–ø—Ä–∏–º–µ—Ä 4:20:", reply_markup=kb_back())
    return SEG_PACE

def parse_pace_to_sec_per_km(s: str) -> int:
    parts = s.strip().split(":")
    if len(parts) != 2 or not all(p.isdigit() for p in parts):
        raise ValueError("–¢–µ–º–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–º:—Å—Å")
    m, sec = map(int, parts)
    return m*60 + sec

def fmt_time(seconds: int) -> str:
    seconds = int(round(seconds))
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return f"{h}:{m:02d}:{s:02d}" if h else f"{m}:{s:02d}"

async def seg_time_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BACK_TEXT:
        return await go_back(update, context)
    try:
        pace_sec = parse_pace_to_sec_per_km(update.message.text)
        meters = context.user_data.get("seg_m", 0.0)
        # –≤—Ä–µ–º—è –æ—Ç—Ä–µ–∑–∫–∞ = (–º–µ—Ç—Ä—ã/1000) * —Ç–µ–º–ø(—Å–µ–∫/–∫–º)
        t_sec = (meters / 1000.0) * pace_sec
        await update.message.reply_text(f"‚è± –í—Ä–µ–º—è –Ω–∞ {int(meters)} –º –ø—Ä–∏ —Ç–µ–º–ø–µ {update.message.text}/–∫–º: {fmt_time(t_sec)}", reply_markup=kb_main())
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}. –ü—Ä–∏–º–µ—Ä —Ç–µ–º–ø–∞: 4:20", reply_markup=kb_back())
        return SEG_PACE

# ---------- 3) –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä dist/pace/time ----------
async def calc_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (–≤–≤–µ–¥–∏ 2 –∏–∑ 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤):\n"
        "‚Ä¢ dist=10  time=45:00  ‚Üí —Ç–µ–º–ø\n"
        "‚Ä¢ dist=21.1 pace=5:00  ‚Üí –≤—Ä–µ–º—è\n"
        "‚Ä¢ pace=4:30 time=40:00 ‚Üí –¥–∏—Å—Ç–∞–Ω—Ü–∏—è\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–π 5..42.2 –∫–º.\n\n"
        "–ù–∞–∂–º–∏ ¬´‚¨Ö –ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
    )
    await update.message.reply_text(help_text, reply_markup=kb_back())

def parse_time_to_seconds_any(s: str) -> int:
    s = s.strip()
    parts = s.split(":")
    if not all(p.isdigit() for p in parts):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
    if len(parts) == 3:
        h, m, sec = map(int, parts)
        return h*3600 + m*60 + sec
    elif len(parts) == 2:
        m, sec = map(int, parts)
        return m*60 + sec
    elif len(parts) == 1:
        return int(parts[0])
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

async def calc_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BACK_TEXT:
        return await go_back(update, context)
    text = update.message.text.lower().replace(",", ".")
    def get_val(key):
        m = re.search(rf"{key}\s*=\s*([^\s]+)", text)
        return m.group(1) if m else None

    dist = get_val("dist")
    pace = get_val("pace")
    time = get_val("time")

    try:
        dist_f = float(dist) if dist else None
        pace_s = parse_time_to_seconds_any(pace) if pace else None
        time_s = parse_time_to_seconds_any(time) if time else None
    except Exception as e:
        return await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {e}", reply_markup=kb_back())

    if dist_f and time_s and not pace_s:
        if not (5.0 <= dist_f <= 42.2):
            return await update.message.reply_text("–î–∏—Å—Ç–∞–Ω—Ü–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 5..42.2 –∫–º", reply_markup=kb_back())
        pace_s = round(time_s / dist_f)
        return await update.message.reply_text(f"–¢–µ–º–ø: {fmt_time(pace_s)}/–∫–º", reply_markup=kb_main())

    if dist_f and pace_s and not time_s:
        if not (5.0 <= dist_f <= 42.2):
            return await update.message.reply_text("–î–∏—Å—Ç–∞–Ω—Ü–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 5..42.2 –∫–º", reply_markup=kb_back())
        time_s = int(pace_s * dist_f)
        return await update.message.reply_text(f"–í—Ä–µ–º—è: {fmt_time(time_s)}", reply_markup=kb_main())

    if pace_s and time_s and not dist_f:
        dist_f = round(time_s / pace_s, 2)
        return await update.message.reply_text(f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {dist_f} –∫–º", reply_markup=kb_main())

    await update.message.reply_text("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –†–û–í–ù–û 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: dist, pace, time. –ü—Ä–∏–º–µ—Ä: dist=10 time=45:00", reply_markup=kb_back())

# ---------- 4) –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–∞ (–†–∏–≥–µ–ª—å) ----------
def riegel(t1_sec: int, d1: float, d2: float, k: float = 1.06) -> int:
    return int(round(t1_sec * (d2 / d1) ** k))

async def predict_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (
        "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –†–∏–≥–µ–ª—é. –í–≤–µ–¥–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ dist=10 time=40:00\n"
        "‚Ä¢ dist=5 time=19:30\n"
        "‚Ä¢ dist=21.1 time=1:35:00\n"
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å: target=42.2\n\n"
        "–ù–∞–∂–º–∏ ¬´‚¨Ö –ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
    )
    await update.message.reply_text(txt, reply_markup=kb_back())

async def predict_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BACK_TEXT:
        return await go_back(update, context)
    text = update.message.text.lower().replace(",", ".")
    def get_val(key):
        m = re.search(rf"{key}\s*=\s*([^\s]+)", text)
        return m.group(1) if m else None

    dist = get_val("dist")
    time = get_val("time")
    target = get_val("target")

    if not (dist and time):
        return  # –ø—É—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∑–∞–±–µ—Ä—É—Ç

    try:
        d1 = float(dist)
        t1 = parse_time_to_seconds_any(time)
    except Exception as e:
        return await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞: {e}", reply_markup=kb_back())

    targets = [5.0, 10.0, 21.1, 42.2]
    if target:
        try:
            targets = [float(target)]
        except:
            pass

    lines = [f"–ò—Å—Ö–æ–¥–Ω–∏–∫: {d1} –∫–º –∑–∞ {fmt_time(t1)}"]
    for d2 in targets:
        t2 = riegel(t1, d1, d2)
        pace2 = int(t2 / d2)
        lines.append(f"{d2:>5} –∫–º ‚Üí {fmt_time(t2)}  ({fmt_time(pace2)}/–∫–º)")
    await update.message.reply_text("\n".join(lines), reply_markup=kb_main())

# ---------- 5) –î–æ—Ä–æ–∂–∫–∞ ‚Üî –¢–µ–º–ø ----------
async def treadmill_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: speed=12  (–∫–º/—á)  –∏–ª–∏  pace=5:00 (/–∫–º)\n\n–ù–∞–∂–º–∏ ¬´‚¨Ö –ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.", reply_markup=kb_back())

async def treadmill_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BACK_TEXT:
        return await go_back(update, context)
    text = update.message.text.lower().replace(",", ".")
    m_speed = re.search(r"speed\s*=\s*([0-9.]+)", text)
    m_pace = re.search(r"pace\s*=\s*([0-9:]+)", text)

    try:
        if m_speed and not m_pace:
            speed = float(m_speed.group(1))  # –∫–º/—á
            if speed <= 0:
                raise ValueError
            pace_sec = int(round(3600 / (speed)))
            return await update.message.reply_text(f"–¢–µ–º–ø: {fmt_time(pace_sec)}/–∫–º", reply_markup=kb_main())
        elif m_pace and not m_speed:
            pace_sec = parse_pace_to_sec_per_km(m_pace.group(1))
            speed = 3600 / pace_sec
            return await update.message.reply_text(f"–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Ä–æ–∂–∫–∏: {speed:.2f} –∫–º/—á", reply_markup=kb_main())
        else:
            return await update.message.reply_text("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –û–î–ò–ù –ø–∞—Ä–∞–º–µ—Ç—Ä: speed=–∫–º/—á  –∏–ª–∏  pace=–º–º:—Å—Å", reply_markup=kb_back())
    except Exception:
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: speed=12  –∏–ª–∏  pace=5:00", reply_markup=kb_back())

# ---------- App ----------
def build_app():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Start/menu
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))

    # Universal back
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BACK_TEXT)}$"), go_back))

    # % –ø—É–ª—å—Å–∞
    conv_hr = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^% –ø—É–ª—å—Å–∞$"), hr_start),
                      CommandHandler("hr", hr_start)],
        states={
            HR_MAX: [MessageHandler(filters.TEXT & ~filters.COMMAND, hr_got_max)],
            HR_PERCENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, hr_calc)]
        },
        fallbacks=[MessageHandler(filters.Regex(f"^{re.escape(BACK_TEXT)}$"), go_back)]
    )
    app.add_handler(conv_hr)

    # –í—Ä–µ–º—è –ø–æ —Ç–µ–º–ø—É (distance m + pace)
    conv_seg = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–í—Ä–µ–º—è –ø–æ —Ç–µ–º–ø—É$"), seg_time_start),
                      CommandHandler("segment", seg_time_start)],
        states={
            SEG_DIST: [MessageHandler(filters.TEXT & ~filters.COMMAND, seg_time_get_dist)],
            SEG_PACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, seg_time_calc)]
        },
        fallbacks=[MessageHandler(filters.Regex(f"^{re.escape(BACK_TEXT)}$"), go_back)]
    )
    app.add_handler(conv_seg)

    # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    app.add_handler(MessageHandler(filters.Regex("^–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä$"), calc_entry))
    app.add_handler(CommandHandler("pace", calc_entry))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, calc_process))

    # –ü—Ä–æ–≥–Ω–æ–∑
    app.add_handler(MessageHandler(filters.Regex("^–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–∞$"), predict_entry))
    app.add_handler(CommandHandler("predict", predict_entry))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, predict_calc))

    # –î–æ—Ä–æ–∂–∫–∞
    app.add_handler(MessageHandler(filters.Regex("^–î–æ—Ä–æ–∂–∫–∞ ‚Üî –¢–µ–º–ø$"), treadmill_entry))
    app.add_handler(CommandHandler("treadmill", treadmill_entry))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, treadmill_calc))

    return app

def main():
    app = build_app()
    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
